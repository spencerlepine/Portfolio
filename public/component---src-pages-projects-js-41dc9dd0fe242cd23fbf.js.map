{"version":3,"sources":["webpack://portfolio-site/./src/pages/projects.js"],"names":["location","projects","data","allMarkdownRemark","edges","revealTitle","useRef","revealTable","revealProjects","title","ref","className","length","map","i","node","frontmatter","date","github","external","ios","android","tech","company","key","el","current","Date","getFullYear","item","href","name"],"mappings":"uKA2GA,UApGqB,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,SAChBC,EADqC,EAAXC,KACVC,kBAAkBC,MAClCC,GAAcC,YAAO,MACrBC,GAAcD,YAAO,MACrBE,GAAiBF,YAAO,IAE9B,OACE,gBAAC,KAAD,CAAQN,SAAUA,GAChB,gBAAC,IAAD,CAAQS,MAAM,aAEd,4BACE,0BAAQC,IAAKL,GACX,sBAAIM,UAAU,eAAd,YACA,qBAAGA,UAAU,YAAb,wCAGF,uBAAKD,IAAKH,GACR,6BACE,6BACE,0BACE,kCACA,mCACA,sBAAII,UAAU,kBAAd,WACA,sBAAIA,UAAU,kBAAd,cACA,oCAGJ,6BACGV,EAASW,OAAS,GACjBX,EAASY,KAAI,WAAWC,GAAO,IAC7B,EAD4B,EAAdC,KAULC,YARPC,EADF,EACEA,KACAC,EAFF,EAEEA,OACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,IACAC,EALF,EAKEA,QACAZ,EANF,EAMEA,MACAa,EAPF,EAOEA,KACAC,EARF,EAQEA,QAEF,OACE,sBAAIC,IAAKV,EAAGJ,IAAK,SAAAe,GAAE,OAAKjB,EAAekB,QAAQZ,GAAKW,IAClD,sBAAId,UAAU,iBAAd,GAAkC,IAAIgB,KAAKV,GAAMW,eAEjD,sBAAIjB,UAAU,SAASF,GAEvB,sBAAIE,UAAU,0BACXY,EAAU,4BAAOA,GAAkB,kCAGtC,sBAAIZ,UAAU,uBACXW,EAAKV,OAAS,GACbU,EAAKT,KAAI,SAACgB,EAAMf,GAAP,OACP,wBAAMU,IAAKV,GACRe,EACA,GACAf,IAAMQ,EAAKV,OAAS,GAAK,wBAAMD,UAAU,aAAhB,UAKlC,sBAAIA,UAAU,SACZ,2BACGQ,GACC,qBAAGW,KAAMX,EAAU,aAAW,iBAC5B,gBAAC,KAAD,CAAMY,KAAK,cAGdb,GACC,qBAAGY,KAAMZ,EAAQ,aAAW,eAC1B,gBAAC,KAAD,CAAMa,KAAK,YAGdX,GACC,qBAAGU,KAAMV,EAAK,aAAW,wBACvB,gBAAC,KAAD,CAAMW,KAAK,cAGdV,GACC,qBAAGS,KAAMT,EAAS,aAAW,0BAC3B,gBAAC,KAAD,CAAMU,KAAK","file":"component---src-pages-projects-js-41dc9dd0fe242cd23fbf.js","sourcesContent":["import React, { useRef } from 'react';\nimport { graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { Layout } from '@components';\nimport { Icon } from '@components/icons';\n\nconst ProjectsPage = ({ location, data }) => {\n  const projects = data.allMarkdownRemark.edges;\n  const revealTitle = useRef(null);\n  const revealTable = useRef(null);\n  const revealProjects = useRef([]);\n\n  return (\n    <Layout location={location}>\n      <Helmet title=\"Projects\" />\n\n      <main>\n        <header ref={revealTitle}>\n          <h1 className=\"big-heading\">Projects</h1>\n          <p className=\"subtitle\">A big list of things I’ve worked on</p>\n        </header>\n\n        <div ref={revealTable}>\n          <table>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Title</th>\n                <th className=\"hide-on-mobile\">Made at</th>\n                <th className=\"hide-on-mobile\">Built with</th>\n                <th>Link</th>\n              </tr>\n            </thead>\n            <tbody>\n              {projects.length > 0 &&\n                projects.map(({ node }, i) => {\n                  const {\n                    date,\n                    github,\n                    external,\n                    ios,\n                    android,\n                    title,\n                    tech,\n                    company,\n                  } = node.frontmatter;\n                  return (\n                    <tr key={i} ref={el => (revealProjects.current[i] = el)}>\n                      <td className=\"overline year\">{`${new Date(date).getFullYear()}`}</td>\n\n                      <td className=\"title\">{title}</td>\n\n                      <td className=\"company hide-on-mobile\">\n                        {company ? <span>{company}</span> : <span>—</span>}\n                      </td>\n\n                      <td className=\"tech hide-on-mobile\">\n                        {tech.length > 0 &&\n                          tech.map((item, i) => (\n                            <span key={i}>\n                              {item}\n                              {''}\n                              {i !== tech.length - 1 && <span className=\"separator\">&middot;</span>}\n                            </span>\n                          ))}\n                      </td>\n\n                      <td className=\"links\">\n                        <div>\n                          {external && (\n                            <a href={external} aria-label=\"External Link\">\n                              <Icon name=\"External\" />\n                            </a>\n                          )}\n                          {github && (\n                            <a href={github} aria-label=\"GitHub Link\">\n                              <Icon name=\"GitHub\" />\n                            </a>\n                          )}\n                          {ios && (\n                            <a href={ios} aria-label=\"Apple App Store Link\">\n                              <Icon name=\"AppStore\" />\n                            </a>\n                          )}\n                          {android && (\n                            <a href={android} aria-label=\"Google Play Store Link\">\n                              <Icon name=\"PlayStore\" />\n                            </a>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </table>\n        </div>\n      </main>\n    </Layout>\n  );\n};\nProjectsPage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default ProjectsPage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            tech\n            github\n            external\n            company\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}