{"componentChunkName":"component---src-templates-post-js","path":"/blog/git-project-configuration-with-husky-and-eslint","result":{"data":{"markdownRemark":{"html":"<p>Working on a project with Git and GitHub is relatively simple. When a project starts to grow however, it is crucial to write clean code that other developers can read. Follow this article to learn how to set up linting and pre-commit hooks for your repository.</p>\n<p>Let’s walk through the steps for a one-time setup to configure <a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">husky</a> pre-commit and pre-push hooks, <a href=\"https://eslint.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint</a> with code styles conventions, <a href=\"https://prettier.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prettier</a> code formatter, and <a href=\"https://github.com/okonet/lint-staged\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lint-staged</a>. Husky automatically runs a script on each commit or push. This is useful for linting files to enforce code styles that keeps the entire code base following conventions.</p>\n<h2>Walkthrough</h2>\n<p>Install the dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install eslint husky prettier eslint-config-prettier --save-dev</code></pre></div>\n<p>Run the commands to install husky and the hooks:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npx husky install &amp;&amp; npm install\nnpx husky add .husky/pre-commit &quot;npx lint-staged&quot;\nnpx husky add .husky/pre-push &quot;npx lint-staged &amp;&amp; npm test&quot;</code></pre></div>\n<h4>Configure ESLint</h4>\n<p>Run <code class=\"language-text\">npm init @eslint/config</code> to create a config file and choose preferred code styles.</p>\n<p>Alternatively, use this example file. In the root directory, create <code class=\"language-text\">.eslintrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"prettier\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2017</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"double\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"avoidEscape\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Configure lint-staged</h4>\n<p>Add the following key to <code class=\"language-text\">package.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">   ...\n    <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"*.{js,json,md}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"prettier --write\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"*.js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --fix\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"*.{js,md}\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write\"</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4>Configure prettier</h4>\n<p>In the root directory, create <code class=\"language-text\">.prettierrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"arrowParens\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Everything in action</h4>\n<p>After making changes, commit the files, and see <code class=\"language-text\">lint-staged</code> automatically run, triggered by the pre-commit hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">my-project$ git commit -m &#39;example commit message&#39;\n✔ Preparing lint-staged...\n✔ Running tasks for staged files...\n✔ Applying modifications from tasks...\n✔ Cleaning up temporary files...\n[example-branch 4bc4030] add new husky setup\n 4 files changed, 59 insertions(+), 44 deletions(-)</code></pre></div>\n<p>All files have been linted and automatically fixed with <code class=\"language-text\">prettier</code>, or denied if too many errors were thrown. Now we can push the \"clean\" code.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">my-project$ git push origin example-branch\n# npx lint-staged\n# ... (no errors found)\n# npm test\n# ... (PASS)\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 375 bytes | 375.00 KiB/s, done.\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo https://github.com/spencerlepine/my-project.git\n   4bc4030..b558038  example-branch -&gt; example-branch</code></pre></div>\n<h4>Boilerplate</h4>\n<p>See a working example here: <a href=\"https://github.com/spencerlepine/husky-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub repository</a>.</p>\n<h4>Notes</h4>\n<p>A useful trick is the <code class=\"language-text\">-–no-verify</code> flag to SKIP the pre-commit or pre-push hook.\nUse this option to skip the husky script in case you force a commit/push.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">my-project$ git push origin my-branch --no-verify\n# husky will not run &quot;npm test&quot;\n... pushing to GitHub</code></pre></div>\n<p>When <code class=\"language-text\">husky</code> released v7, it had some major changes to the configuration. There are many articles and Stack Overflow answers about husky, but some of them are misleading if they were using v4.</p>\n<p>Hope this article helped! Interested in more, check out more articles <a href=\"https://www.spencerlepine.com/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>Also find me here:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a></li>\n<li><a href=\"https://www.linkedin.com/in/spencer-lepine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube</a></li>\n</ul>","frontmatter":{"title":"Git project configuration with Husky and ESLint","description":"Git conventions using pre-commit hooks and enforcing code styles.","date":"2022-03-20T00:00:00.000Z","slug":"/blog/git-project-configuration-with-husky-and-eslint","tags":["Git","Husky","ESLint","Workflow","GitHub"]}}},"pageContext":{}},"staticQueryHashes":["1994492073","325176663","604461682","921617919"]}