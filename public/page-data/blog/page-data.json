{"componentChunkName":"component---src-pages-blog-index-js","path":"/blog/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"title":"Git project configuration with Husky and ESLint","description":"Git conventions pre-commit hooks and enforcing code styles.","slug":"/blog/git-project-configuration-with-husky-and-eslint","date":"2022-03-20T00:00:00.000Z","draft":false},"html":"<p>Working on a project with Git and GitHub is relatively simple. When a project starts to grow however, it is crucial to write clean code that other developers can read. Follow this article to learn how to set up linting and pre-commit hooks for your repository.</p>\n<p>Let’s walk through the steps for a one-time setup to configure <a href=\"https://github.com/typicode/husky\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">husky</a> pre-commit and pre-push hooks, <a href=\"https://eslint.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint</a> with code styles conventions, <a href=\"https://prettier.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">prettier</a> code formatter, and <a href=\"https://github.com/okonet/lint-staged\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lint-staged</a>. Husky automatically runs a script on each commit or push. This is useful for linting files to enforce code styles that keeps the entire code base following conventions.</p>\n<h2>Walkthrough</h2>\n<p>Install the dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install eslint husky prettier eslint-config-prettier --save-dev</code></pre></div>\n<p>Run the commands to install husky and the hooks:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npx husky install &amp;&amp; npm install\nnpx husky add .husky/pre-commit &quot;npx lint-staged&quot;\nnpx husky add .husky/pre-push &quot;npx lint-staged &amp;&amp; npm test&quot;</code></pre></div>\n<h4>Configure ESLint</h4>\n<p>Run <code class=\"language-text\">npm init @eslint/config</code> to create a config file and choose preferred code styles.</p>\n<p>Alternatively, use this example file. In the root directory, create <code class=\"language-text\">.eslintrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"prettier\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"no-console\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react/prop-types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"quotes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"double\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"avoidEscape\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Configure lint-staged</h4>\n<p>Add the following key to <code class=\"language-text\">package.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">   ...\n    <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"*.{js,json,md}\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"prettier --write\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"*.js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --cache --fix\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"*.{js,md}\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write\"</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h4>Configure prettier</h4>\n<p>In the root directory, create <code class=\"language-text\">.prettierrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">85</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"arrowParens\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"tabWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Everything in action</h4>\n<p>After making changes, commit the files, and see <code class=\"language-text\">lint-staged</code> automatically run, triggered by the pre-commit hook.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">my-project$ git commit -m &#39;example commit message&#39;\n✔ Preparing lint-staged...\n✔ Running tasks for staged files...\n✔ Applying modifications from tasks...\n✔ Cleaning up temporary files...\n[example-branch 4bc4030] add new husky setup\n 4 files changed, 59 insertions(+), 44 deletions(-)</code></pre></div>\n<p>All files have been linted and automatically fixed with <code class=\"language-text\">prettier</code>, or denied if too many errors were thrown. Now we can push the \"clean\" code.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">my-project$ git push origin example-branch\n# npx lint-staged\n# ... (no errors found)\n# npm test\n# ... (PASS)\nEnumerating objects: 7, done.\nCounting objects: 100% (7/7), done.\nDelta compression using up to 8 threads\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 375 bytes | 375.00 KiB/s, done.\nTotal 4 (delta 3), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (3/3), completed with 3 local objects.\nTo https://github.com/spencerlepine/my-project.git\n   4bc4030..b558038  example-branch -&gt; example-branch</code></pre></div>\n<h4>Boilerplate</h4>\n<p>See a working example here: <a href=\"https://github.com/spencerlepine/husky-boilerplate\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub repository</a>.</p>\n<h4>Notes</h4>\n<p>A useful trick is the <code class=\"language-text\">-–no-verify</code> flag to SKIP the pre-commit or pre-push hook.\nUse this option to skip the husky script in case you force a commit/push.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">my-project$ git push origin my-branch --no-verify\n# husky will not run &quot;npm test&quot;\n... pushing to GitHub</code></pre></div>\n<p>When <code class=\"language-text\">husky</code> released v7, it had some major changes to the configuration. There are many articles and Stack Overflow answers about husky, but some of them are misleading if they were using v4.</p>\n<p>Hope this article helped! Interested in more, check out more articles <a href=\"https://www.spencerlepine.com/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>Also find me here:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a></li>\n<li><a href=\"https://www.linkedin.com/in/spencer-lepine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"Portfolio Site Continuous Integration GitHub Action","description":"Automating steps to deploy static files for my personal website.","slug":"/blog/portfolio-site-continuous-integration-github-action","date":"2021-10-11T00:00:00.000Z","draft":false},"html":"<p>After learning about GatsbyJS and building a static Portfolio site and blog, I searched for systems to deploy this website. At this point, I had purchased the domain name through AWS Route53, but I still needed somewhere to host the static files.</p>\n<p>I chose to deploy the site through Digital Ocean Droplet. This was a remote Ubuntu virtual machine with an IP address I could route to. Once I installed apache web server software and connected domain name, the website was live.</p>\n<p>There was still one problem with this deployment process. Updating the website took several steps. After local development, I needed to build/generate the static files with Gatbsy locally, and push them to the GitHub repo. Then, I would ssh into the Ubuntu Droplet, clone the updated repo again, and replace the static files for apache to serve.</p>\n<p>Steps to deploy were repetitive. Having to remember terminal commands and finding passwords was inconvenient. I was unable to build the static files on the remote Ubuntu machine with limited hardware specs.</p>\n<p>One improvement I made was writing a script to delete and copy new files when deploying on Digital Ocean. This addition did not solve everything, as I hard-coded my github username and repository name.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># RUN the script:\n# sudo ./syncBuild.sh portfolio-site\n\nGITHUB_LINK=&quot;https://github.com/spencerlepine/$1.git&quot;\n\ngit clone &quot;$GITHUB_LINK&quot;\necho -e &quot;$GREEN successfully cloned repo$NC \\n&quot;\n\necho &quot;Removing the current public folder&quot;\nrm -r -d public\necho &quot;Moving into the github repo folder&quot;\ncd $1\necho &quot;Moving public folder contents OUT of repo folder&quot;\nmv public ..\necho -e &quot;$GREEN Successfully copy news files $NC \\n&quot;\necho &quot;Moving back into parent directory&quot;\ncd ..\n\necho &quot;Deleting leftover github repo files&quot;\nrm -d -r  &quot;$1&quot;\n\necho &quot;Restarting apache server&quot;\nsystemctl restart apache2\n\necho -e &quot;$GREEN Public folder sync complete! $NC&quot;\n\necho &quot;Visit: spencerlepine.com&quot;\n\n# &quot;syncBuild.sh&quot; 52L, 956C</code></pre></div>\n<p>Although this process took less than 10 minutes, switching between the IDE, GitHub, the terminal, and the browser was annoying. It would be better to automate this process. To do that, we can use a GitHub action that will trigger on every repository update. A handy feature of GitHub repositories is the ability to store secrets/environment variables. We can use this to store passwords directly connected to the repository, so all credentials needed for the project are stored in one place.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Let’s create the GitHub workflow file:</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: CI\n\non:\n  push:\n    branches: [ master ]\n\njobs:\n\n  deploy:\n    name: Deploy\n    runs-on: ubuntu-latest\n    steps:\n    - name: Deploy Static Files\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ secrets.HOST }}\n        username: ${{ secrets.USERNAME }}\n        key: ${{ secrets.KEY }}\n        passphrase: ${{ secrets.PASSPHRASE }}\n        port: ${{ secrets.PORT }}\n        script_stop: true\n        script: |\n          # change directory to where website files are stored\n          # clone the repository\n          # remove the current public folder w/ static files\n          # enter the repo folder\n          # extract the public folder from the repo folder\n          # remove the leftover GitHub repo files\n          # restart the web server\n          echo “Visit deployed site: spencerlepine.com”</code></pre></div>\n<h3>Conclusion</h3>\n<p>This GitHub action will use another <a href=\"https://github.com/appleboy/ssh-action\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ssh-action</a> action to handle the remote ssh connection. After storing the connection credentials in the GitHub repository secrets, this can securely/dynamically connect to the remote Ubuntu machine. The last key for this action job is the script, or verbatim Ubuntu commands that will be run. For the sake of brevity, I have only written pseudo-code for the deployment steps.</p>\n<p>With this file saved in the <code class=\"language-text\">.github</code> folder in the project,  GitHub can execute the action and connect to our remote server autonomously. After adding a blog post or updating the website, the only step required is pushing the code to GitHub (which I would do anyways). Now, the GitHub workflow will handle all of the steps to connect to the host server, delete old static files, and download the fresh static files.</p>\n<p>The continuous integration for this website is completely automated now. This saves me time and effort. No need to worry about forgetting how to deploy later on.</p>\n<hr>\n<p>View the source code on <a href=\"https://github.com/spencerlepine/portfolio-site\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.</p>\n<p>Also find me here:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter (@spencerlepine)</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub (@spencerlepine)</a></li>\n<li><a href=\"https://www.linkedin.com/in/spencer-lepine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube (Spencer Lepine)</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"ManyShiba - The World's Greatest Twitter Bot","description":"Exploration of building a custom Twitter Bot.","slug":"/blog/manyshiba-the-worlds-greatest-twitter-bot","date":"2021-09-01T00:00:00.000Z","draft":false},"html":"<p>ManyShiba is the greatest Twitter bot ever created. Bless your soul with a daily photo of the almighty Shiba. Be uplifted by the spirit of this holy and sacred creature to free your soul.</p>\n<p>For so long, I felt that something was missing in my life. After being blessed by the presence of a divine Shiba Inu dog, I had my answer. I could cleanse my soul each day by reminding myself of this divine being. But that couldn’t be it, there had to be some way I could bless EVERYONE.</p>\n<p>Behold - your new favorite Twitter bot - <a href=\"https://twitter.com/manyshiba\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@ManyShiba</a>. (source code: <a href=\"https://github.com/spencerlepine/manyshiba-bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>)</p>\n<h3>So what exactly is the ManyShiba Bot?</h3>\n<p>This is a simple Node.js app connected to the Twitter API. The app is deployed on <a href=\"https://dashboard.heroku.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku</a>  and connected to the Twitter developer account.</p>\n<p>Each time the script runs, a new dog image will be fetched from the <a href=\"https://shibe.online/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shibe.online</a> API. That image will then be uploaded and posted on the Twitter feed.</p>\n<h3>Technologies:</h3>\n<p>To build this app, there were three technologies I worked with.</p>\n<ul>\n<li><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a></li>\n<li><a href=\"https://shibe.online/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Shibe.online API</a></li>\n<li><a href=\"https://www.npmjs.com/package/twit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">twit</a></li>\n</ul>\n<p>Node is a popular Javascript runtime environment that can easily run on Heroku. Heroku is a PaaS and great tool to deploy a small app for free.</p>\n<p>The Shibe.online API is a third party service to retrieve a link for dog pictures. Since there are many random photos to use in that database, it is the perfect resource for finding many new photos.</p>\n<p>Finally, the twit library is a Twitter API Client for Node that simplifies the REST requests. Since this app will only be posting tweets, there are on advanced requests being made to the Twitter API.</p>\n<p>With each of these tools, we can have a functioning Twitter bot. Here are the steps for code:</p>\n<ul>\n<li>Save the Twitter API configuration</li>\n<li>Initialize the Twit Client with the configuration</li>\n<li>Fetch a random image from Shibe.online</li>\n<li>Convert the image from a URL to base64</li>\n<li>Tweet the image</li>\n</ul>\n<p>After registering a <a href=\"https://developer.twitter.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter App</a>, make sure to enable Read/Write permissions in the App settings. Create an <code class=\"language-text\">.env</code> file in the root of the project based on <code class=\"language-text\">.env.example</code>. We can use this data in our file with an object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  consumer_key<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TWITTER_API_KEY</span><span class=\"token punctuation\">,</span>\n  consumer_secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TWITTER_API_SECRET</span><span class=\"token punctuation\">,</span>\n  access_token<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TWITTER_API_ACCESS_TOKEN</span><span class=\"token punctuation\">,</span>\n  access_token_secret<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">TWITTER_API_ACCESS_TOKEN_SECRET</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In <code class=\"language-text\">app.js</code> we can import <code class=\"language-text\">twit</code> and pass along the config obj:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> twit <span class=\"token keyword\">from</span> <span class=\"token string\">'twit'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> twitterClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">twit</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Before we tweet anything, we first need to generate the content to post. This is where we will retrieve an image from the Shibe.online API. Note, the Shibe endpoint will return a list of image URLs stored on a third party server. We must download this image, because posting an image URL does not actually display it on the feed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">API_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'http://shibe.online/api/shibes?count=1&amp;urls=true&amp;httpsUrls=false'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchRandomImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tweetFunction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> resultList <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">API_ENDPOINT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> newImage <span class=\"token operator\">=</span> resultList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newImage\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After retrieving a URL from Shibe.online, we must fetch the image as well. We can convert the data from the image URL and convert it to a base64 string in memory. Since we are saving the image data, a Tweet will always load the image since it does not depend on the third party image database anymore.</p>\n<p>Note, you can use any library for HTTP requests like <a href=\"https://axios-http.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axios</a>. This example uses the <code class=\"language-text\">http</code> and <code class=\"language-text\">node-fetch</code> libraries available on <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">npm</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">urlToBase64</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">imgUrl<span class=\"token punctuation\">,</span> tweetFunction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>imgUrl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">httpRes</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    httpRes<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Exclude -> \"data:\" + httpRes.headers[\"content-type\"] + \";base64,\";</span>\n    <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> httpRes<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      body <span class=\"token operator\">+=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> httpRes<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">tweetFunction</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Got error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchRandomImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tweetFunction</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">urlToBase64</span><span class=\"token punctuation\">(</span>newImage<span class=\"token punctuation\">,</span> tweetFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With a base64 string, we need to upload it as media context to Twitter. After uploading it, we have access to a <code class=\"language-text\">media_id</code>. This media_id can be attached to the actual Tweet, which will cause the image to render on the feed. For this project, there is no text context attached to this Tweet.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">tweetImage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tweetContent</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tweetContent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    twitterClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/upload'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> media_data<span class=\"token operator\">:</span> tweetContent <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// now we can assign alt text to the media, for use by screen readers and</span>\n      <span class=\"token comment\">// other text-based presentations and interpreters</span>\n      <span class=\"token keyword\">var</span> mediaIdStr <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>media_id_string\n      <span class=\"token keyword\">var</span> altText <span class=\"token operator\">=</span> <span class=\"token string\">\"Shiba Inu\"</span>\n      <span class=\"token keyword\">var</span> meta_params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> media_id<span class=\"token operator\">:</span> mediaIdStr<span class=\"token punctuation\">,</span> alt_text<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> text<span class=\"token operator\">:</span> altText <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n      twitterClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/metadata/create'</span><span class=\"token punctuation\">,</span> meta_params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// now we can reference the media and post a tweet (media will attach to the tweet)</span>\n          <span class=\"token keyword\">var</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> media_ids<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>mediaIdStr<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n\n          twitterClient<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'statuses/update'</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fetchRandomImage</span><span class=\"token punctuation\">(</span>tweetImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With each step tied together, we can retrieve Shiba images and generate Tweets with media content. To see the source code, head over to the <a href=\"https://github.com/spencerlepine/manyshiba-bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub repository</a>.</p>\n<p>With a working Twitter bot, I could run the script with Node on my local machine. However, it wouldn’t be automated if I had to run it manually. To solve this, I decided to deploy everything onto Heroku. This service allows node servers to run not just simple static files.</p>\n<p>With <a href=\"https://devcenter.heroku.com/articles/scheduler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku Scheduler</a>, you can configure script executions. Make sure to add this script to your <code class=\"language-text\">package.json</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  “scripts”<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    “start”<span class=\"token operator\">:</span> “node app<span class=\"token punctuation\">.</span>js”\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Adding a setting to execute the script on a timer makes the bot automated. I decided to let the bot create a daily Tweet with this tool. Our ManyShiba bot is now fully functional!</p>\n<hr>\n<p>View the source code on <a href=\"https://github.com/spencerlepine/manyshiba-bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.</p>\n<p>Also find me here:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter (@spencerlepine)</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub (@spencerlepine)</a></li>\n<li><a href=\"https://www.linkedin.com/in/spencer-lepine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube (Spencer Lepine)</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"Creating Custom Git Commands","description":"Creating custom Git commands to help automate git worklow.","slug":"/blog/creating-custom-git-commands","date":"2021-08-16T00:00:00.000Z","draft":false},"html":"<p>Every time I clone a repository from GitHub, I always run the same set of commands. This is prone to typos and simply inconvenient. There is a simple solution of combining each step into a single command that automatically runs everything for us.</p>\n<p>In this example, I need to clone a GitHub repository, move into the new directory, and then open the project in VSCode.</p>\n<p>Instead of multiple commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">  git clone https://github.com/spencerlepine/readme-crawler\n  cd readme-crawler\n  code .</code></pre></div>\n<p>It would great to run one command:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">\tclone https://github.com/spencerlepine/readme-crawler</code></pre></div>\n<p>To achieve this, we can create a script in the <code class=\"language-text\">~/bin</code> directory. Make sure this path matches up with your configuration for the terminal (e.g. <code class=\"language-text\">PATH=$PATH:$HOME/bin</code>).</p>\n<p>Let’s create a custom script to combine the git commands.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">  #!/bin/bash\n\n  ((!$#)) &amp;&amp; echo missing git URL argument! &amp;&amp; exit 1\n\n  git clone $1\n  basename=$(basename $1)\n  reponame=${basename%.*}\n  cd $reponame\n  npm install\n  code .</code></pre></div>\n<p>Use this script or create your own, and follow these steps to set up the custom command:</p>\n<ul>\n<li>Navigate to usr/local/bin -> <code class=\"language-text\">cd ~/../../usr/local/bin</code></li>\n<li>Run <code class=\"language-text\">vim clone</code>\n<ul>\n<li><em>Paste the script</em></li>\n</ul>\n</li>\n<li>Save the file:\n<ul>\n<li>*press ‘ESC’</li>\n<li>*press ‘SHIFT’ + ‘:’</li>\n<li>*type ‘wq’ + ENTER</li>\n</ul>\n</li>\n<li>Create an executable\n<ul>\n<li><code class=\"language-text\">chmod +x clone</code></li>\n</ul>\n</li>\n<li>Run the command!\n<ul>\n<li><code class=\"language-text\">clone https://github.com/spencerlepine/manyshiba-bot.git</code></li>\n</ul>\n</li>\n</ul>\n<p>Viola! This script will accept one command line argument of the destination repo URL. It will automatically open the new project in VSCode in one command.</p>\n<p>Also find me here:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a></li>\n<li><a href=\"https://www.linkedin.com/in/spencer-lepine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"Building a README Crawler with Node.js","description":"An Overview of the Node.js README Web Crawler project and how I created it.","slug":"/blog/building-a-web-crawler-with-node-js","date":"2021-08-15T00:00:00.000Z","draft":false},"html":"<p>Building a README Crawler with Node.js</p>\n<p>An Overview of the Node.js README Web Crawler project and how I created it.</p>\n<p>A recent project of mine was this Node.js <a href=\"https://spencerlepine.com/blog/building-a-web-crawler-with-node.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web crawler</a>. Working on that led to this idea for another crawler. I wanted a way to navigate through GitHub and search for obvious typos. I had this idea after stumbling across silly typos on numerous portfolio pages. Perhaps I could help fix these errors and ensure these projects/sites are more presentable.</p>\n<p>If you’re interest in the final product, you can find the package <a href=\"https://www.npmjs.com/package/readme-crawler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>, as well as the <a href=\"https://github.com/spencerlepine/readme-crawler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a>.</p>\n<p>The goal was to create a process for automatically navigating through repositories and creating a method for spell-checking what is found. Doing that manually is time consuming, so the computer will execute that process for us. A <a href=\"https://www.cloudflare.com/learning/bots/what-is-a-web-crawler/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web crawler</a> will systematically browse different pages across the internet. The purpose of this specific crawler would be scraping GitHub only.</p>\n<p>Here's the breakdown of this problem:</p>\n<ul>\n<li>Fetch the HTML data from a URL</li>\n<li>Look at the README file displayed in that  DOM</li>\n<li>Export README and details README for later use</li>\n<li>Generate a list of repository links in displayed in README</li>\n</ul>\n<p>To execute the algorithm, we will use <a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> (for the JavaScript runtime) and <a href=\"https://www.npmjs.com/package/node-fetch\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">node-fetch</a> (for network requests). This means we will run the code locally from the command line.\nFor this project, we will have an output folder to store all the README data, as well as a list (queue) of repository URLs to visit.\nBefore diving into the code, it is important to plan the input and output of the algorithm. For this web crawler, we will start at a valid GitHub repository page, which would be one URL string. After visiting each page with a README, we will export the data into a new file.\nNow lets cover the process of requesting a repository page from a URL. For this, we only care about saving the README file that is displayed, and we will ignore any other links that GitHub displays (such as the navbar). We will send a URL request with node-fetch, and retrieve the result of a HTML string. If we convert the HTML string to a DOM Tree, we can search for a specific element. GitHub stores the README file under a div with the class \"markdown-body\". We can use a library called 'jsdom' to use Browser API methods, and return a specific node.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchReadMeDOMFromRepoURL</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> destinationDOM<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> document <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JSDOM</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> readmeNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".markdown-body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      destinationDOM <span class=\"token operator\">=</span> readmeNode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not fetch url: \"</span> <span class=\"token operator\">+</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> destinationDOM<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now that we have access to a local node displaying the README content, we can export that data.\nInstead of using a spell checker at this stage, I decided to handle that separately and resort to a command-line alternative. This meant the README file could be exported to file locally, and then we process spell checking files after the crawler stops running.\nWith a README DOM node we will convert it from HTML to a markdown file. Websites give the browser HTML code to display.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exportRepoDOM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">readmeNode<span class=\"token punctuation\">,</span> repoURL<span class=\"token punctuation\">,</span> outputFolderPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readmeNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> href <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseGitHubUrl</span><span class=\"token punctuation\">(</span>repoURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> folderDestination <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>outputFolderPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>owner<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>folderDestination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span>folderDestination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> markdown <span class=\"token operator\">=</span> turndownService<span class=\"token punctuation\">.</span><span class=\"token function\">turndown</span><span class=\"token punctuation\">(</span>readmeNode<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createMarkdownFile</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">,</span> folderDestination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">URL=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>href<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\nGIT_URL=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>href<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.git\\nREPO_NAME=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\nOWNER=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>owner<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">createInfoFile</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">,</span> folderDestination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Before we are finished with this README, we have to traverse the DOM node to find any other GitHub repository links. This will allow us to follow pages and crawl GitHub. Keep in mind though, there could be a README without any links, and we might want to navigate through GitHub some other way.\nSince we are using jsdom, we can use the built-in getElementsByTagName method. We only want to save valid GitHub links, so we can use a helper function to test with regex. With that, we can create a list of links found.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLinksFromDOM</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">jsDOM<span class=\"token punctuation\">,</span> isUsableLink</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">const</span> validLinks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> linkElements <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>jsDOM <span class=\"token operator\">&amp;&amp;</span> jsDOM<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> linkElements<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> thisElement <span class=\"token operator\">=</span> linkElements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> thisUrl <span class=\"token operator\">=</span> thisElement<span class=\"token punctuation\">.</span>href<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isUsableLink</span><span class=\"token punctuation\">(</span>thisUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         validLinks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>thisUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> validLinks<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Great, so far we retrieve README content from a URL and use that to generate a list of new URLs. If we want to continue searching and finding README files, we can follow the links and repeat entire process. This will recursively crawl the GitHub repositories, allowing us to gather data.\nTo keep track of the new URLs to visit, each link needs to be stored in a queue, or in terms of data structures, a (stack)[<a href=\"https://www.geeksforgeeks.org/stack-data-structure/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.geeksforgeeks.org/stack-data-structure/</a>]. To implement this, I append all the items of the new list to a file. Whenever the program is ready to fetch the next link, we can pull and remove the first line of the queue file and return it for a new URL string. The link queue will be stored in a file where we append/delete line by line. This was done to avoid storing an array in memory to avoid crashing, and to allow pausing the crawler and any point.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">saveLinkToQueue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">linkStr<span class=\"token punctuation\">,</span> outputFolderPath<span class=\"token punctuation\">,</span> outputFileName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> outputFolderPath <span class=\"token operator\">+</span> outputFileName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> linkStr <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> linkStr <span class=\"token operator\">+</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>All of these modules together will download README files in an organized output folder. After running the web crawler, we can run a spell checker on the exported data. To do this, I used a package called ‘<a href=\"https://www.npmjs.com/package/yaspeller\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">yaspeller</a>’. Each time I want to correct a README, I can generate a file with all common typos and errors.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">yaspeller -e &quot;.md&quot; ./ --find-repeat-words --ignore-digits --ignore-urls --only-errors &amp;&gt; &quot;spellcheck.txt&quot;</code></pre></div>\n<p>And that's it! I now have a way to look through hundreds of repositories. I can spell check tons of README files and help people remove possibly embarrassing typos. There are many ways to expand on this. You could analyze the languages used, the diction, create a Graph, or even run the data through machine learning algorithms.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> repositoriesFolder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outputFolderPath <span class=\"token operator\">+</span> <span class=\"token string\">\"repositories/\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> linkQueueFile <span class=\"token operator\">=</span> <span class=\"token string\">\"linkQueue.txt\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">linkListCallback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">linkList</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> outputFolderPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outputFolderPath<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>followReadMeLinks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> linkList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">link</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">await</span> <span class=\"token function\">saveLinkToQueue</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> outputFolderPath<span class=\"token punctuation\">,</span> linkQueueFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> nextURL <span class=\"token operator\">=</span><span class=\"token keyword\">await</span> <span class=\"token function\">getNextLinkFromQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outputFolderPath<span class=\"token punctuation\">,</span> linkQueueFile\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nextURL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fetchAndProcessRepo</span><span class=\"token punctuation\">(</span>nextURL<span class=\"token punctuation\">,</span> repositoriesFolder<span class=\"token punctuation\">,</span> linkListCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nextURL <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getNextLinkFromQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outputFolderPath<span class=\"token punctuation\">,</span> linkQueueFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This project is also available on <a href=\"www.npmjs.com/package/readme-crawler\">npm</a>. Install the package and try it yourself!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ReadMeCrawler <span class=\"token keyword\">from</span> <span class=\"token string\">'readme-crawler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> crawler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadMeCrawler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    startUrl<span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/jnv/lists'</span><span class=\"token punctuation\">,</span>\n    followReadMeLinks<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    outputFolderPath<span class=\"token operator\">:</span> <span class=\"token string\">'./output/'</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n crawler<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>Not only was this project fun, but I was able to learn about using Node.js and other npm packages. I spent many hours reading about the 'fs' module, and thinking of different ways to process/store the data. I also tried working with executing commands with Node.js, to run the spell checker synchronously on each result. However, It was difficult to pipe the stdout correctly, and I realized that spell checking was a separate concern apart from web crawling anyways.\nOverall, this was a great learning experience and problem solving exercise.</p>\n<hr>\n<p>View the source code on <a href=\"https://github.com/spencerlepine/readme-crawler\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub</a>.</p>\n<p>Also find me here:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter (@spencerlepine)</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub (@spencerlepine)</a></li>\n<li><a href=\"https://www.linkedin.com/in/spencer-lepine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LinkedIn</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube (Spencer Lepine)</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"Software Engineering Workflow","description":"Collection of software and resources I use for work","slug":"/blog/software-engineering-workflow","date":"2021-08-13T00:00:00.000Z","draft":false},"html":"<!-- MARKDOWN CONTENT -->\n<p>This is a collection of resources and my general workflow for Software Engineering. Note: workstation is running MacOS.</p>\n<h3><strong>Dependencies/Libraries:</strong></h3>\n<ul>\n<li><a href=\"https://brew.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Homebrew</a> - package manager for linux-based OSs.</li>\n<li><a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Git</a> - version control, manage files during project development</li>\n<li><a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> + <a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nvm</a> - runtime for javascript without a browser</li>\n<li><a href=\"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Npm</a> - large organization of libraries/packages available to use in projects.</li>\n<li><a href=\"https://www.python.org/downloads/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python 3</a> - python language interpreter for python ^3.0.0.</li>\n<li><a href=\"https://www.mysql.com/products/workbench/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MySQL</a> - SQL database software for development</li>\n<li><a href=\"https://redis.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Redis</a> - real time data storage with different  data structures in a cache</li>\n<li><a href=\"https://devcenter.heroku.com/articles/heroku-cli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Heroku CLI</a> - manager for Heroku apps from the command line</li>\n<li><a href=\"https://aws.amazon.com/cli/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Amazon CLI</a> - manager for AWS services from the command line</li>\n</ul>\n<h3><strong>Communication:</strong></h3>\n<ul>\n<li><a href=\"https://slack.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Slack</a></li>\n<li><a href=\"https://zoom.us/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zoom</a></li>\n</ul>\n<h3><strong>Recording:</strong></h3>\n<ul>\n<li><a href=\"https://obsproject.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OBS</a></li>\n<li><a href=\"https://zoom.us/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Zoom Meeting Recording</a></li>\n</ul>\n<h3><strong>Other Software:</strong></h3>\n<ul>\n<li><a href=\"https://www.google.com/chrome/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chrome</a> - main browser with debugging tools</li>\n<li><a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Postman</a> - API platform for easy endpoint testing</li>\n<li><a href=\"https://justgetflux.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flux</a> - screen eye strain assistance</li>\n<li><a href=\"https://www.gimp.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GIMP</a> - photo editing software</li>\n</ul>\n<h3><strong>Toy problems:</strong></h3>\n<ul>\n<li><a href=\"https://excalidraw.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ExcaliDraw</a></li>\n<li><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LeetCode</a></li>\n<li><a href=\"https://cyber-dojo.org/creator/home\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CyberDojo</a></li>\n<li><a href=\"https://www.topcoder.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TopCoder</a></li>\n<li><a href=\"https://coderbyte.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coderbyte</a></li>\n<li><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HackerRank</a></li>\n</ul>\n<h3><strong>Note taking:</strong></h3>\n<ul>\n<li><a href=\"https://www.notion.so/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Notion</a></li>\n</ul>\n<h3><strong>IDE:</strong></h3>\n<p><a href=\"https://code.visualstudio.com/download\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VSCode</a>:</p>\n<ul>\n<li>\n<p>MacOS Quick Action: Open Folder from finder -> <a href=\"https://stackoverflow.com/questions/64040393/open-a-folder-in-vscode-through-finder-in-macos\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Configure Quick Action</a></p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint</a> Extension - Integrates ESLint JavaScript into VS Code.</p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bracket Pair Colorizer</a> Extension - A customizable extension for colorizing matching brackets</p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=peakchen90.open-html-in-browser\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Open In Default Browser</a> Extension -  A VSCode extension to fast open html file in browser</p>\n</li>\n<li>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Stylelint</a> Extension - Modern CSS/SCSS/Less linter</p>\n</li>\n<li>\n<p>settings.json:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token punctuation\">{</span>\n       <span class=\"token property\">\"editor.lightbulb.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.parameterHints.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.renderWhitespace\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.snippetSuggestions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.tabSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.wordWrap\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"off\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"emmet.showExpandedAbbreviation\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"files.trimTrailingWhitespace\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"javascript.suggest.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"javascript.updateImportsOnFileMove.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"javascript.validate.enable\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"eslint.alwaysShowStatus\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"explorer.confirmDelete\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"python.pythonPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/python3\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"workbench.editorAssociations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token property\">\"*.ipynb\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jupyter.notebook.ipynb\"</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"[javascript]\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vscode.typescript-language-features\"</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"css.validate\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"window.zoomLevel\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.hover.sticky\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.formatOnPaste\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.defaultFormatter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vscode.json-language-features\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"workbench.iconTheme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"material-icon-theme\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"security.workspace.trust.untrustedFiles\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"liveshare.allowGuestTaskControl\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"liveshare.allowGuestDebugControl\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"liveshare.anonymousGuestApproval\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"python.defaultInterpreterPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/usr/bin/python3\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"editor.largeFileOptimizations\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2><strong>Interested in working together?</strong></h2>\n<p>Let’s connect! Find me on any of my socials linked below:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter (@spencerlepine)</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub (@spencerlepine)</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube (Spencer Lepine)</a></li>\n</ul>"}},{"node":{"frontmatter":{"title":"What I Learned During 100DaysOfCode","description":"A recap of the concepts and skills I aquired during this challenge","slug":"/blog/what-i-learned-during-100-days-of-code","date":"2021-06-26T00:00:00.000Z","draft":false},"html":"<!-- MARKDOWN CONTENT -->\n<p><img src=\"https://miro.medium.com/max/1400/1*n2qkciO2rlQFMSrCwUAZYQ.png\" alt=\"\"></p>\n<p>I recently completed a popular challenge on Twitter name #100DaysOfCode. There is no barrier to entry, and you just need to code for at least 1 hour a day. This is a great challenge to motivate yourself and see your progress alongside others.</p>\n<p>In my case, it was not my first time coding when I started this. However, the challenge helped me stay dedicated and build upon each skill I learned.</p>\n<h1>Day 1–10: The Challenge Begins!</h1>\n<p>It all started with a ton of useful lessons on ES6 skills. There was a lot of new syntax and tricks that I never knew about. Since I started learning Javascript before ES6 was released, there were quite a few features I needed to practice.</p>\n<p><a href=\"https://scrimba.com/learn/introtoes6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> ES6 Course - Scrimba</a></p>\n<p>Having just completed a small course on the React framework, I worked on implementing ES6 skills I picked up to make small projects. Here is a simple React app connected to GitHubs REST API. This helped me learn how to make fetch calls and save the data to state.</p>\n<p><a href=\"https://github.com/spencerlepine/github-api-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> spencerlepine/github-api-react - GitHub</a></p>\n<p>Each day I worked on different React concepts. Connecting/modifying a mock database locally. Working with state and props and pass data around. My most effective learning styles was learning-by-doing. After reading the docs and seeing a new feature, I would realize how I could use it to improve my project.</p>\n<p>To wrap up this part of the challenge, there were some coding challenges from Cyber Dojo to help practice problem solving. I was able to solve “Align Columns”, “LCD Digits”, “Wonderland Number”. Check out my repo with my solutions here:</p>\n<p><a href=\"https://github.com/spencerlepine/cyber-dojo-exercises\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spencerlepine/cyber-dojo-exercises - GitHub</a></p>\n<h1>Day 11–20: Just Getting Started</h1>\n<p>At this point, there was some great momentum and I was always feeling more motivated to learn. The Scrimba React course had a lot of great lessons on all the basics of React.</p>\n<p><a href=\"https://scrimba.com/learn/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The React Bootcamp - Scrimba</a></p>\n<p>I built a controlled-form in React that would update state based on events and targets. Next up was the big concept of hooks and functional components. Little did I know this was only the START of what is possible in React.</p>\n<p>The React course was complete, which led me to start a new project called Spotify Top Songs. This site would connect to the Spotify Web API with client-side authentication. When a user connected their account, they could select various artists from a menu. The script would then generate a playlist by accessing the top 5 songs of each artist.</p>\n<p>This time, code was much more organized with the components and logic separated. With so many fetch calls and bits of logic to intertwine, it was important to build everything slowly and cleanly.</p>\n<p><a href=\"https://github.com/spencerlepine/spotify-top-songs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spencerlepine/spotify-top-songs - GitHub</a></p>\n<p>I learned about prop-types and default props, which can be pretty handy. Worked React higher order components and children components. Started learning about AWS S3 buckets. To practice, I deployed my Spotify Top Songs to the S3 bucket.</p>\n<p>After discovering the behemoth of AWS products, I wasted no time working to set up an AWS EC2 instance to host a static site, which I would connect to my Route53 domain.</p>\n<p>Just before reaching day 20, a worked on an in-browser <a href=\"https://github.com/spencerlepine/react-chess\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Chess React</a> app. This was just another opportunity to practice Javascript and apply knowledge.</p>\n<h1>Day 21–30: Gaining Momentum!</h1>\n<p>With a solid understanding of React, it was time to double down on more computer science fundamentals. It was exciting to build toy projects, but that wouldn’t be enough.</p>\n<p>After finding the CS50 course online, I watched the lectures on C and Python. This was very useful to learn about memory pointers and how the interpreter reads code. Dave is a GREAT teacher and I would highly recommend going through the course.</p>\n<p>Lots to learn about memory allocation, what libraries are doing under the hood, string manipulation, and regex.</p>\n<p>Alongside CS50 was more material about React memo and Context API — write a component to access a ‘global’ state in a separate file. Import that file and render through that in any component of choice. Custom hooks that handle business logic. React router basics. Conditional rendering. All of these skills would allow me to start creating real multi-page sites!</p>\n<p>Day 29 was the day I started working on Galvanize basic prep lessons.</p>\n<h1>Day 31–40: Diving Deeper</h1>\n<p>CS50 included some lessons about data structures and SQL. I worked on some really good challenges for the CS50 Fiftyville assignment.</p>\n<p>It was time for me to learn how to connect a database. I began working with MongoDB and NodeJS. I used Postman to practice making requests.</p>\n<p>With a lot of data to store in state, I needed a way to organize it all. Thats where React Redux came up — createStore, redux philosophies, subscribe, dispatch, combineReducer. Abstracting reducers to handle each state in isolation. combineReducers to combine everything and handle state more cleanly in a rootReducer.</p>\n<p>With MongoDB connected to React, I was able to work on a MERN app that could read/write from the database. Connecting back-end/front-end routes and using controllers for the fetch logic/requests.</p>\n<p>Day 36 was when I began the QuickCar react app. Connected it to a backend MongoDB Atlas server. Add reducer + actions for post/fetch from frontend. Save the data in redux state. I created forms and routes with components connected to the Redux state using useSelectors.</p>\n<h1>Day 41–50: Working on QuickCart</h1>\n<p>As I worked through some lessons for Galvanize basic prep, I also started lessons on <a href=\"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">freeCodeCamp</a>. Got a better understanding of Regex from that.</p>\n<p>Next came Javascript algorithm practice + Object Orientated Programming review. Inheriting methods from parent objects. Using Object.prototypes to reuse methods.</p>\n<p>I revisited my AWS account. Started basic portfolio site using React — Set up LAMP stack server to host website. Direct AWS Route53 domain to DigitalOcean droplet. Set up SSL, MySQL, and WordPress. Working to set up a blog too.</p>\n<p>With a working site, it would be really nice to have a blog hosted on the domain. I attempted to set up a blog. Researched Gatsby, GraphCMS, ButterCMS, GraphQL. Queries were not working. Unable to route to posts. This was a difficult concept to navigate, but along the way I learned a lot about apache and setting up ssl.</p>\n<h1>Day 51–60: A Working Blog!</h1>\n<p>Gatsby.js was the answer. Instead of using a headless CMS, I settled with local md files to use for an article. During this challenge, I spent many hours working with the ‘mdx’ plugin. I tried to connect a CMS through queries and GraphQL, but it was very difficult.</p>\n<p>Around this time I continued working through Learn.co lessons for Flatiron prep. There were two main sections on Javascript and Ruby. The Ruby material was interesting and they even did a review on Object Oriented Programming.</p>\n<p>Flatiron wasn’t the only school that I was preparing for though. I completed my technical assessment by creating a basic HTML page with images and a clickable button.</p>\n<p>The last major assignment on hand was working through more of the freeCodeCamp Javascript fundamentals material.</p>\n<h1>Day 51–60: Coding Bootcamp!</h1>\n<p>No, I didn’t start a coding bootcamp, but I was getting ready! I got accepted into Flatiron (they didn’t do a TAA anymore), accepted into General Assembly, and I was studying to pass my Hack Reactor technical assessment. My target was in August, which was over 100 days from this point.</p>\n<p>Making sure I could get into these schools was my main priority, but I continued learning and working on projects on the side.</p>\n<p>I worked on building the QuickCart app and added tons of features. Import/Export a grocery database. Improve the UI and styles. Upload images for a product in the form. Convert images to base64 strings. Work with file blobs and cropping images. Generate suggested products with a recommendation algorithm. Work on authentications between the front/back-end for the MERN app. Add a “cart” to store items until purchase.</p>\n<p>At this point, the grocery app was still connected to MongoDB. I was able to use localStorage and save some user data, but I knew I needed EVERYTHING to be in the cloud.</p>\n<p>With all that work done, I began Hack Reactor premium prep. The technical admissions assessment was going to be difficult, so this would help me prepared my vocalization and problem solving.</p>\n<p>This is where I began working testing. Test driven development is integral to Software Engineering. I was able to appreciate my code much more after practicing it.</p>\n<h1>Day 71–80: Hack Reactor and Firebase</h1>\n<p>At this point, I was making really good progress in my Hack Reactor prep work. I was able to learn the basic methodology of testing my code. Whenever I worked on Javascript challenges, it was important to practice writing tests and get used to the upfront setup.</p>\n<p>This week was my first attempt at the Hack Reactor TAA, and I passed! This was incredible, because I got to choose between GA, Flatiron, and Hack Reactor.</p>\n<p>I continued working on QuickCart on the side. There were some bug fixes and UI improvements that needed to be done. I migrated from MongoDB to Firebase for the backend. I had to read through the docs and get familiar with Firestore.</p>\n<p>One of the most important themes of this week was practicing problem solving. Hack Reactor was really pushing best practices and effective communication. Each day I worked on a toy problem/code challenge. With a timer running, I would work on my pseudo-code BEFORE starting and really explain/verbalize my thought process as much as I could.</p>\n<p>Now that I was able to write small tests for a challenge, I wanted to work on writing tests for a real project. I started learning how to use Enzyme and Jest for React test-driven-development. The process is tedious at the start, but it will ensure the code is more robust. This was difficult for me at first, because I wasn’t sure if my React test was written incorrectly, or I needed to pass the test now instead. There were lots of features to read Docs about, like redirecting, testing context/store, and tons more.</p>\n<h1>Day 81–90: Test Driven Development and APIs</h1>\n<p>The TDD practice with React was the birth of Woofer. I wanted to work on a project and build it from the ground up writing tests. I did my best to write a test FIRST before writing code. This project did not go very far during my challenge, since there were other priorities. It was going to take a long time to complete the idea, and it was just good practice to implement testing.</p>\n<p>I documented/planned out the Woofer app before starting. I made wireframes and planned out the logic/routing ahead of time. It was taking WAY too much time to work with mock stores and complex routing in testing. I even fell into certain anti-patterns with testing after researching about tests online.</p>\n<p><a href=\"https://github.com/spencerlepine/woofer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spencerlepine/woofer - GitHub</a></p>\n<p>I stepped away from the deep rabbit hole of React TDD. I went back to QuickCart and migrated EVERYTHING to client-side. Now it was one complete React app with firebase authentication built in. I was able to host this site on Heroku too, so anyone could use it.</p>\n<p><a href=\"https://github.com/spencerlepine/quickcart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">spencerlepine/quickcart  - GitHub</a></p>\n<p>One feature I had been eager to add to the grocery app was “searching products”. With an empty form, users could manually input EVERY detail about a product, but nobody would want to use that. By connecting to the OpenFoodFacts API, I could search a dump of thousands of grocery products. This was an open source dump that anybody can contribute to. They also feature nutrition score data, so it can help users see healthier options.</p>\n<h1>Day 91–100: The Final Stretch</h1>\n<p>After learning so much with Javascript and best-practices for writing code, it was time to USE these skills. I continued working through Hack Reactor prep material. I learned about higher order functions, scopes, and hoisting. There were lessons about terminal commands and important dev tools like homebrew. It was time to upgrade my developer workflow, and get familiar with industry standard software.</p>\n<p>Here I read about NodeJS, npm, semvar, and modules. This was everything I need to know about how projects are set up and how developers are able to work together. There needs to be structure and conventions throughout the code base so everyone is on the same page.</p>\n<p>I also added a some features to QuickCart on the side again. I connected a Google Custom Search Engine to allow image searches for a product. Instead of having the user upload or snap a photo, they could simply link an existing photo. This allowed me to store the image sources with links, instead a long base64 string with image data. That would improve scalability and prevent product images from being lost easily.</p>\n<p>The next Hack Reactor prep section was about Git and GitHub. This was a REALLY useful sections to go through because it will be the backbone of any project. Knowing how to properly document and collaborate on a project makes everything so much more compatible. Your code needs to be readable and maintainable. People can review your code and merge branches to improve the project. You could even checkout different commits and revert your code. Before I learned about these practices, I would always CTRL+Z my file and start over again, wasting so much time.</p>\n<p>More work on Mocha and Chai testing was done. Getting familiar with different libraries and how they have similar functions.</p>\n<h1><strong>Challenge Complete!</strong></h1>\n<p>After 100 days of coding, I was able to explore new features and concepts relating to Javascript and software development. The dedication allowed me to keep my momentum and build upon what I learned the previous day.</p>\n<h2>Interested in working together?</h2>\n<p>Let’s connect! Find me on any of my socials linked below:</p>\n<ul>\n<li><a href=\"https://twitter.com/SpencerLepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Twitter (@spencerlepine)</a></li>\n<li><a href=\"https://github.com/spencerlepine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub (@spencerlepine)</a></li>\n<li><a href=\"https://www.youtube.com/channel/UCBL6vAHJZqUlyJp-rcFU55Q\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Youtube (Spencer Lepine)</a></li>\n</ul>\n<h2>Here is an overview of everything I learned:</h2>\n<ul>\n<li>ES6 Javascript</li>\n<li>Functional vs. OPP programming</li>\n<li>Javascript algorithms and data structures</li>\n<li>NodeJS</li>\n<li>Redux</li>\n<li>React</li>\n<li>SQL</li>\n<li>Python</li>\n<li>Comp Sci fundamentals</li>\n<li>MongoDB</li>\n<li>Firebase</li>\n<li>React Context, state, props, controlled forms</li>\n<li>CMS</li>\n<li>Hosting a static site</li>\n<li>Procedure for problem solving (psuedocode, breaking it down)</li>\n<li>Mocha/Chai testing</li>\n<li>React Jest/Enzyme testing</li>\n<li>Connecting to APIs (Spotify Web API, GitHub REST API, OpenFoodFacts API)</li>\n<li>Fetch calls + axios</li>\n<li>Separating the front-end / back-end</li>\n<li>Deploying to Heroku</li>\n</ul>\n<h2><strong>Projects:</strong></h2>\n<p>Explore more <a href=\"https://spencerlepine.com/projects\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">projects</a> — or check out the ones mentioned in the article:</p>\n<h3>QuickCart</h3>\n<p>Make a shopping list with personal grocery data to help budget.</p>\n<p><a href=\"https://github.com/spencerlepine/quickcart\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>Portfolio Site</h3>\n<p>Portfolio and blog website ( Visit Here) created by Spencer Lepine. Built using static pages created with GatsbyJS…</p>\n<p><a href=\"https://github.com/spencerlepine/portfolio-site\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>Cyber Dojo Exercises</h3>\n<p>Personal solutions to various Cyber Dojo exercises. Code is written in Python and tests use 'asserts' with pytest. All…</p>\n<p><a href=\"https://github.com/spencerlepine/cyber-dojo-exercises\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>Woofer</h3>\n<p>Tinder for Pets Web App. Swipe and connect with other furry friends in the area.</p>\n<p><a href=\"https://github.com/spencerlepine/woofer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>React Chess</h3>\n<p>Play chess in the browser by with drag and drop moves. This was created using the Javascript React framework. component…</p>\n<p><a href=\"https://github.com/spencerlepine/react-chess\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>Study Garden</h3>\n<p>Improve focus and discipline with this timer app. Study until the timer runs out and add plants to your personal…</p>\n<p><a href=\"https://github.com/spencerlepine/study-garden\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>Spotify Top Songs</h3>\n<p>Generate a Spotify playlist based on the top rated songs of your favorite artists. Connect user Spotify accounts to…</p>\n<p><a href=\"https://github.com/spencerlepine/spotify-top-songs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>GitHub User Overview</h3>\n<p>This React App allows the user to type a username get an overview of their GitHub repos using the GitHub REST API.</p>\n<p><a href=\"https://github.com/spencerlepine/github-api-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>\n<hr>\n<h3>CS50 Problem Sets</h3>\n<p>My solutions to the online CS50 course generously provided by Harvard University.</p>\n<p><a href=\"https://github.com/spencerlepine/cs50-problem-sets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Repo</a></p>"}}]}},"pageContext":{}},"staticQueryHashes":["1994492073","325176663","604461682","921617919"]}